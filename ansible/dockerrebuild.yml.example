---
- hosts: development, production
  become: true
  gather_facts: yes

  tasks:
    - name: Install requests Python package
      ansible.builtin.pip:
        name: requests

    # timedatectl list-timezones  command lists the timezones.
    # Select your zone from the list, and the value below.
    - name: Set timezone
      community.general.timezone:
        name: Universal
      become_method: sudo
      become_user: root
      become: true

    # Check if dockerfiles directory exists
    - name: Checking if a directory exists
      stat:
        path: /home/{{ ansible_user }}/dockerfiles
      register: dir_data

    - name: Report a missing directory
      debug:
        msg: "dockerfiles directory doesn't exist"
      when: not dir_data.stat.exists

    - name: Report an existing directory
      debug:
        msg: "dockerfiles directory exists"
      when: dir_data.stat.exists and dir_data.stat.isdir

    - name: Stop services
      community.docker.docker_compose_v2:
        project_src: /home/{{ ansible_user }}/dockerfiles
        state: stopped
      register: output
      when: dir_data.stat.exists and dir_data.stat.isdir

    - name: Remove existing services
      community.docker.docker_compose_v2:
        project_src: /home/{{ ansible_user }}/dockerfiles
        state: absent
        remove_orphans: true
        remove_volumes: true
      when: dir_data.stat.exists and dir_data.stat.isdir

    - name: Remove nginx image
      community.docker.docker_image:
        name: "{{ docker_nginx_image_name }}"
        source: local
        state: absent
        tag: latest
        force_absent: yes

    - name: Remove nginx image
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ docker_nginx_image_name }}"
        tag: "{{ docker_nginx_image_version }}"
        force_absent: yes

    - name: Remove nginx image 2
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ docker_nginx_image_name_2 }}"
        tag: latest
        force_absent: yes

    - name: Remove nginx image 2
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ docker_nginx_image_name_2 }}"
        tag: "{{ docker_nginx_image_version_2 }}"
        force_absent: yes

    - name: Remove traefikcustom latest image
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ docker_traefik_image_name }}"
        tag: latest
        force_absent: yes

    - name: Remove traefikcustom image
      community.docker.docker_image:
        state: absent
        source: local
        name: "{{ docker_traefik_image_name }}"
        tag: "{{ docker_traefik_image_version }}"
        force_absent: yes

    # Do not run this on Dev PC
    - name: Recursively remove directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/dockerfiles"
        state: absent
      when: ("docker_profile == 'production'") and (dir_data.stat.exists and dir_data.stat.isdir)

    - name: Wait for a few seconds
      ansible.builtin.pause:
        seconds: "2"

    # Create dockerfiles directory
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/dockerfiles"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0640"

    # Upload files
    - name: Upload dockerfiles directory with rsync
      ansible.posix.synchronize:
        archive: true
        checksum: true
        compress: true
        delete: false
        dirs: false
        group: false
        owner: false
        perms: false
        recursive: true
        mode: push
        times: true
        verify_host: true
        private_key: "{{ ansible_ssh_private_key_file }}"
        set_remote_user: true
        src: "{{ workbench_full_path }}/dockerfiles"
        dest: "/home/{{ ansible_user }}"
        dest_port: "{{ ansible_port }}"
        rsync_timeout: 600

    - name: Build nginx image
      community.docker.docker_image:
        name: "{{ docker_nginx_image_name }}"
        build:
          # args:
          #   log_volume: /var/log/nginx
          #   chdir: "{{ workbench_full_path }}/dockerfiles"
          dockerfile: Dockerfile
          path: "/home/{{ ansible_user }}/dockerfiles/{{ nginx_directory_name }}"
        state: present
        repository: "{{ docker_nginx_image_name }}:{{ docker_nginx_image_version }}"
        source: build
        tag: "{{ docker_nginx_image_version }}"
        push: false

    - name: Build nginx2 image
      community.docker.docker_image:
        name: "{{ docker_nginx_image_name_2 }}"
        build:
          # args:
          #   log_volume: /var/log/nginx
          #   chdir: "{{ workbench_full_path }}/dockerfiles"
          dockerfile: Dockerfile
          path: "/home/{{ ansible_user }}/dockerfiles/{{ nginx_directory_name_2 }}"
        state: present
        repository: "{{ docker_nginx_image_name_2 }}:{{ docker_nginx_image_version_2 }}"
        source: build
        tag: "{{ docker_nginx_image_version_2 }}"
        push: false

    - name: Build traefikcustom image
      community.docker.docker_image:
        name: "{{ docker_traefik_image_name }}"
        build:
          dockerfile: Dockerfile
          path: "/home/{{ ansible_user }}/dockerfiles/{{ traefik_directory_name }}"
          # args:
          #   log_volume: /var/log/nginx
          #   chdir: "{{ workbench_full_path }}/dockerfiles"
        state: present
        repository: "{{ docker_traefik_image_name }}:{{ docker_traefik_image_version }}"
        source: build
        tag: "{{ docker_traefik_image_version }}"
        push: false

    - name: Start services
      community.docker.docker_compose_v2:
        project_src: "/home/{{ ansible_user }}/dockerfiles"
      register: output

    - name: Get info on Fail2ban container
      community.docker.docker_container_info:
        name: fail2ban
      register: result

    - name: Does Fail2ban container exist?
      ansible.builtin.debug:
        msg: "The container {{ 'exists' if result.exists else 'does not exist' }}"

    - name: Print information about Fail2ban container
      ansible.builtin.debug:
        var: result.container.State.Running
      when: result.exists

    - name: Wait for a few seconds
      ansible.builtin.pause:
        seconds: "2"

    - name: Get info on Fail2ban container
      community.docker.docker_container_info:
        name: fail2ban
      register: result

    - name: Print information about Fail2ban container
      ansible.builtin.debug:
        var: result.container.State.Running
      when: result.exists

    - name: Copy jail.local file into the container
      community.docker.docker_container_copy_into:
        container: fail2ban
        path: "/home/{{ ansible_user }}/dockerfiles/fail2ban/jail.local"
        container_path: "/etc/fail2ban/jail.d/jail.local"
      when: result.container.State.Running

    - name: Wait for a few seconds
      ansible.builtin.pause:
        seconds: "2"

    - name: Get info on Fail2ban container
      community.docker.docker_container_info:
        name: fail2ban
      register: result

    - name: Print information about Fail2ban container
      ansible.builtin.debug:
        var: result.container.State.Running
      when: result.exists
